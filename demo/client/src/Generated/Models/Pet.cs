// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace PetStore.Models
{
    /// <summary> The Pet. </summary>
    public partial class Pet
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Pet"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="age"></param>
        /// <param name="ownerId"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> is null. </exception>
        internal Pet(int id, string name, int age, long ownerId)
        {
            Argument.AssertNotNull(name, nameof(name));

            Id = id;
            Name = name;
            Age = age;
            OwnerId = ownerId;
        }

        /// <summary> Initializes a new instance of <see cref="Pet"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="age"></param>
        /// <param name="ownerId"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Pet(int id, string name, string tag, int age, long ownerId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Name = name;
            Tag = tag;
            Age = age;
            OwnerId = ownerId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="Pet"/> for deserialization. </summary>
        internal Pet()
        {
        }

        /// <summary> Gets the id. </summary>
        public int Id { get; }
        /// <summary> Gets the name. </summary>
        public string Name { get; }
        /// <summary> Gets the tag. </summary>
        public string Tag { get; }
        /// <summary> Gets the age. </summary>
        public int Age { get; }
        /// <summary> Gets the owner id. </summary>
        public long OwnerId { get; }
    }
}
