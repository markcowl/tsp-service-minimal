// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;
using PetStore.Models;

namespace PetStore
{
    // Data plane generated sub-client.
    /// <summary> The Toys sub-client. </summary>
    public partial class Toys
    {
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Toys for mocking. </summary>
        protected Toys()
        {
        }

        /// <summary> Initializes a new instance of Toys. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service endpoint. </param>
        internal Toys(ClientPipeline pipeline, Uri endpoint)
        {
            _pipeline = pipeline;
            _endpoint = endpoint;
        }

        /// <summary> Gets an instance of the resource. </summary>
        /// <param name="petId"> The <see cref="int"/> to use. </param>
        /// <param name="toyId"> The <see cref="long"/> to use. </param>
        public virtual async Task<ClientResult<Toy>> GetToyAsync(int petId, long toyId)
        {
            ClientResult result = await GetToyAsync(petId, toyId, null).ConfigureAwait(false);
            return ClientResult.FromValue(Toy.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> Gets an instance of the resource. </summary>
        /// <param name="petId"> The <see cref="int"/> to use. </param>
        /// <param name="toyId"> The <see cref="long"/> to use. </param>
        public virtual ClientResult<Toy> GetToy(int petId, long toyId)
        {
            ClientResult result = GetToy(petId, toyId, null);
            return ClientResult.FromValue(Toy.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Gets an instance of the resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetToyAsync(int,long)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="petId"> The <see cref="int"/> to use. </param>
        /// <param name="toyId"> The <see cref="long"/> to use. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetToyAsync(int petId, long toyId, RequestOptions options)
        {
            using PipelineMessage message = CreateGetToyRequest(petId, toyId, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Gets an instance of the resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetToy(int,long)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="petId"> The <see cref="int"/> to use. </param>
        /// <param name="toyId"> The <see cref="long"/> to use. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetToy(int petId, long toyId, RequestOptions options)
        {
            using PipelineMessage message = CreateGetToyRequest(petId, toyId, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> List. </summary>
        /// <param name="petId"> The <see cref="int"/> to use. </param>
        /// <param name="nameFilter"> The <see cref="string"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nameFilter"/> is null. </exception>
        public virtual async Task<ClientResult<ToyCollectionWithNextLink>> GetToysAsync(int petId, string nameFilter)
        {
            Argument.AssertNotNull(nameFilter, nameof(nameFilter));

            ClientResult result = await GetToysAsync(petId, nameFilter, null).ConfigureAwait(false);
            return ClientResult.FromValue(ToyCollectionWithNextLink.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary> List. </summary>
        /// <param name="petId"> The <see cref="int"/> to use. </param>
        /// <param name="nameFilter"> The <see cref="string"/> to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nameFilter"/> is null. </exception>
        public virtual ClientResult<ToyCollectionWithNextLink> GetToys(int petId, string nameFilter)
        {
            Argument.AssertNotNull(nameFilter, nameof(nameFilter));

            ClientResult result = GetToys(petId, nameFilter, null);
            return ClientResult.FromValue(ToyCollectionWithNextLink.FromResponse(result.GetRawResponse()), result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] List.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetToysAsync(int,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="petId"> The <see cref="int"/> to use. </param>
        /// <param name="nameFilter"> The <see cref="string"/> to use. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nameFilter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetToysAsync(int petId, string nameFilter, RequestOptions options)
        {
            Argument.AssertNotNull(nameFilter, nameof(nameFilter));

            using PipelineMessage message = CreateGetToysRequest(petId, nameFilter, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] List.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetToys(int,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="petId"> The <see cref="int"/> to use. </param>
        /// <param name="nameFilter"> The <see cref="string"/> to use. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nameFilter"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetToys(int petId, string nameFilter, RequestOptions options)
        {
            Argument.AssertNotNull(nameFilter, nameof(nameFilter));

            using PipelineMessage message = CreateGetToysRequest(petId, nameFilter, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        internal PipelineMessage CreateGetToyRequest(int petId, long toyId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pets/", false);
            uri.AppendPath(petId.ToString(), true);
            uri.AppendPath("/toys/", false);
            uri.AppendPath(toyId.ToString(), true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetToysRequest(int petId, string nameFilter, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pets/", false);
            uri.AppendPath(petId.ToString(), true);
            uri.AppendPath("/toys", false);
            uri.AppendQuery("nameFilter", nameFilter, true);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        private static PipelineMessageClassifier _pipelineMessageClassifier200;
        private static PipelineMessageClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 ??= PipelineMessageClassifier.Create(stackalloc ushort[] { 200 });
    }
}
