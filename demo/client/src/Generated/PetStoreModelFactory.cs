// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace PetStore.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class PetStoreModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Pet"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="age"></param>
        /// <param name="ownerId"></param>
        /// <returns> A new <see cref="Models.Pet"/> instance for mocking. </returns>
        public static Pet Pet(int id = default, string name = null, string tag = null, int age = default, long ownerId = default)
        {
            return new Pet(
                id,
                name,
                tag,
                age,
                ownerId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PetCreate"/>. </summary>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="age"></param>
        /// <param name="ownerId"></param>
        /// <returns> A new <see cref="Models.PetCreate"/> instance for mocking. </returns>
        public static PetCreate PetCreate(string name = null, string tag = null, int age = default, long ownerId = default)
        {
            return new PetCreate(name, tag, age, ownerId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PetCollectionWithNextLink"/>. </summary>
        /// <param name="value"> The items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="Models.PetCollectionWithNextLink"/> instance for mocking. </returns>
        public static PetCollectionWithNextLink PetCollectionWithNextLink(IEnumerable<Pet> value = null, Uri nextLink = null)
        {
            value ??= new List<Pet>();

            return new PetCollectionWithNextLink(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Checkup"/>. </summary>
        /// <param name="id"></param>
        /// <param name="vetName"></param>
        /// <param name="notes"></param>
        /// <returns> A new <see cref="Models.Checkup"/> instance for mocking. </returns>
        public static Checkup Checkup(int id = default, string vetName = null, string notes = null)
        {
            return new Checkup(id, vetName, notes, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CheckupCollectionWithNextLink"/>. </summary>
        /// <param name="value"> The items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="Models.CheckupCollectionWithNextLink"/> instance for mocking. </returns>
        public static CheckupCollectionWithNextLink CheckupCollectionWithNextLink(IEnumerable<Checkup> value = null, Uri nextLink = null)
        {
            value ??= new List<Checkup>();

            return new CheckupCollectionWithNextLink(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Insurance"/>. </summary>
        /// <param name="provider"></param>
        /// <param name="premium"></param>
        /// <param name="deductible"></param>
        /// <returns> A new <see cref="Models.Insurance"/> instance for mocking. </returns>
        public static Insurance Insurance(string provider = null, int premium = default, int deductible = default)
        {
            return new Insurance(provider, premium, deductible, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Toy"/>. </summary>
        /// <param name="id"></param>
        /// <param name="petId"></param>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.Toy"/> instance for mocking. </returns>
        public static Toy Toy(long id = default, long petId = default, string name = null)
        {
            return new Toy(id, petId, name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ToyCollectionWithNextLink"/>. </summary>
        /// <param name="value"> The items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="Models.ToyCollectionWithNextLink"/> instance for mocking. </returns>
        public static ToyCollectionWithNextLink ToyCollectionWithNextLink(IEnumerable<Toy> value = null, Uri nextLink = null)
        {
            value ??= new List<Toy>();

            return new ToyCollectionWithNextLink(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Owner"/>. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="age"></param>
        /// <returns> A new <see cref="Models.Owner"/> instance for mocking. </returns>
        public static Owner Owner(long id = default, string name = null, int age = default)
        {
            return new Owner(id, name, age, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OwnerCollectionWithNextLink"/>. </summary>
        /// <param name="value"> The items on this page. </param>
        /// <param name="nextLink"> The link to the next page of items. </param>
        /// <returns> A new <see cref="Models.OwnerCollectionWithNextLink"/> instance for mocking. </returns>
        public static OwnerCollectionWithNextLink OwnerCollectionWithNextLink(IEnumerable<Owner> value = null, Uri nextLink = null)
        {
            value ??= new List<Owner>();

            return new OwnerCollectionWithNextLink(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }
    }
}
